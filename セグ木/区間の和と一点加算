// 区間の和と一点加算
// 動作確認
// https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=DSL_2_B
// Language: C++17

#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) std::begin(x), std::end(x)
using namespace std;
// #include <atcoder/all>
// using namespace atcoder;
using ll = long long;
int N, Q;
int const INF = INT_MAX;
struct SegmentTree {
  // セグメント木は完全2分木の再下段（葉）に配列を入れることで、区間に対する処理を効率化する
  // 入力が1-indexなら0-indexに変換しろ。
public:
  // privateがベストだけど確認できるようにpublicにしている。
  int n;            // セグメント木の再下段の要素数
  vector<int> node; // セグメント木の配列

public:
  SegmentTree(vector<int> v) {
    // 元配列 vからセグメント木の配列を作る
    // セグメント木の再下段にはノードがN個ある
    // それより上の段のノードは全部でN-1個あるのが大事な性質。（メルセンヌ数）
    // 再下段のノード数は元配列のサイズ <=「２の冪」を満たす最小の２の冪である。
    //  ex)元配列のサイズ=7なら、２の冪=8である。
    // （２の冪：1, 2, 4, 8,16,...と2だけを掛け合わせた数）
    int sz = v.size();
    // うっかりint n = 1;で再定義するとバグるから気をつけろ
    n = 1; // 再下段のノード数 nを計算。
    while (n < sz) {
      n *= 2;
    }
    // セグメント木全体のノード数は 2n -1個である。
    // 再下段で元配列vが入らないノードはここで初期化したままです。
    node.resize((2 * n) - 1, 0);

    // 再下段に値を入れる。
    // 再下段より上の段は自分の子の2値を参照して入れれば良い。
    for (int i = 0; i < sz; ++i) {
      node[(n - 1) + i] = v[i];
    }
    // 再下段より上を初期化
    for (int i = n - 2; i >= 0; --i) {
      node[i] = node[(2 * i) + 1] + node[(2 * i) + 2];
    }
  }
  // x番目の値にvalを加算する。
  void add(int x, int val) {
    x += (n - 1); // 再下段のノードにアクセス
    node[x] += val;
    while (x > 0) {
      x = (x - 1) / 2;
      node[x] = node[(2 * x) + 1] + node[(2 * x) + 2];
    }
  }
  // 要求区間 [a, b) 中の和を答える( [a, b)は半開区間)
  // k := 自分がいるノードのインデックス
  // 対象区間は [l, r) にあたる
  int getSum(int a, int b, int k = 0, int l = 0, int r = -1) {
    if (r < 0) {
      // 最初に呼び出された時の対象区間は[0, n)
      r = n;
    }
    if (r <= a || b <= l) {
      // 要求区間と対象区間が交わらない　-> 適当に返す。
      return 0;
    }
    if (a <= l && r <= b) {
      // 要求区間が対象区間を完全に覆っている -> 対象区間を答えの計算に使う
      return node[k];
    }

    // 要求区間が対象区間の一部を覆っている。 -> 子について探索を行う
    // 左側の子を vl ・ 右側の子を vr としている
    // 新しい対象区間は、現在の対象区間を半分に割ったもの
    int vl = getSum(a, b, (2 * k) + 1, l, (l + r) / 2);
    int vr = getSum(a, b, (2 * k) + 2, (l + r) / 2, r);
    return vl + vr;
  }
};
int main() {
  cin >> N >> Q;
  SegmentTree seg(vector<int>(N, 0));
  // 入力が1-indexなら0-indexに変換しろ。
  // クエリの種類によって、yが添字か値か変わるので間違えた（１敗）
  for (int i = 0; i < Q; i++) {
    int c, x, y;
    cin >> c >> x >> y;
    if (c == 0) {
      --x;
      seg.add(x, y);
    } else {
      --x, --y;
      cout << seg.getSum(x, y + 1) << endl;
    }
  }
  // // ↓セグ木の再下段のノード数と中身を出力。
  // cout << endl;
  // cout << seg.n << endl;
  // cout << endl;
  // // 再下段を出力
  // for (int i = 0; i < seg.n; ++i) {
  //   int nodeNum = seg.n - 1; // 再下段の最初のノード番号
  //   cout << "インデックス:" << i << " " << seg.node[nodeNum + i] << endl;
  // }
  // // セグ木を根から全て出力
  // cout << "セグ木を根から全て出力" << endl;
  // for (int i = 0; i < seg.n * 2 -1; ++i) {
  //   cout << "インデックス:" << i << " " << seg.node[i] << endl;
  // }
}
