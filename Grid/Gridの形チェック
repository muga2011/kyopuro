 //　　座標の中に収まっているかチェックする
 auto ok = [&](int i, int j) { return 0 <= i and i < H and 0 <= j and j < W; };
  
  
 /*
 矢印みたいな、ばつ印を検出する方法(ABC300_C)
 右上、右下、左上、左下をチェックするラムダ式を作って、test(i, j, 1)に当てはまれば、whileを使ってばつ印の大きさを求める。
 Nyaanさん
 #.#
 .#.
 #.#
 */
 auto ok = [&](int i, int j) { return 0 <= i and i < H and 0 <= j and j < W; };
 //中心の#から長さdマス目のクロスが存在すればtrueを返し、そうでなければfalseを返す。
 auto test = [&](int i, int j, int d) {
    // 右上、右下、左上、左下をチェックする。
    for (auto& x : vector{+d, -d}) {
      for (auto& y : vector{+d, -d}) {
        int s = i + x, t = j + y;
        if (!ok(s, t) or g[s][t] != '#') return false;
      }
    }
    return true;
 };   
 
 
 /*
 ８方向（縦、横、斜め）に探索する方法(ABC30２_B)
　SSRS さん
 */
 for (int i = 0; i < H; i++){
    for (int j = 0; j < W; j++){
      for (int k = 0; k < 8; k++){
        bool ok = true;
        for (int l = 0; l < 5; l++){
          int x = i + dx[k] * l;
          int y = j + dy[k] * l;
          if (!(0 <= x && x < H && 0 <= y && y < W)){
            ok = false;
          } else if (S[x][y] != "snuke"[l]){
            ok = false;
          }
        }
        if (ok){
          for (int l = 0; l < 5; l++){
            cout << i + dx[k] * l + 1 << ' ' << j + dy[k] * l + 1 << endl;
          }
        }
      }
    }
